// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: stadion_protos/register/register.proto

package register

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegisterService_CreateRegister_FullMethodName = "/register.RegisterService/CreateRegister"
	RegisterService_Update_FullMethodName         = "/register.RegisterService/Update"
	RegisterService_AddImage_FullMethodName       = "/register.RegisterService/AddImage"
	RegisterService_GetRegister_FullMethodName    = "/register.RegisterService/GetRegister"
	RegisterService_GetRegisters_FullMethodName   = "/register.RegisterService/GetRegisters"
	RegisterService_DeleteRegister_FullMethodName = "/register.RegisterService/DeleteRegister"
	RegisterService_Login_FullMethodName          = "/register.RegisterService/Login"
	RegisterService_UpdatePassword_FullMethodName = "/register.RegisterService/UpdatePassword"
	RegisterService_GetByEmail_FullMethodName     = "/register.RegisterService/GetByEmail"
	RegisterService_UpdateRole_FullMethodName     = "/register.RegisterService/UpdateRole"
	RegisterService_Tobeanadmin_FullMethodName    = "/register.RegisterService/Tobeanadmin"
	RegisterService_CheckUserId_FullMethodName    = "/register.RegisterService/CheckUserId"
)

// RegisterServiceClient is the client API for RegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterServiceClient interface {
	CreateRegister(ctx context.Context, in *CreateRegisterRequest, opts ...grpc.CallOption) (*CreateRegisterResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error)
	GetRegister(ctx context.Context, in *GetRegisterRequest, opts ...grpc.CallOption) (*GetRegisterResponse, error)
	GetRegisters(ctx context.Context, in *GetRegistersRequest, opts ...grpc.CallOption) (*GetRegistersResponse, error)
	DeleteRegister(ctx context.Context, in *DeleteRegisterRequest, opts ...grpc.CallOption) (*DeleteRegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	GetByEmail(ctx context.Context, in *GetByEmailRequest, opts ...grpc.CallOption) (*GetByEmailResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	Tobeanadmin(ctx context.Context, in *TobeanadminRequest, opts ...grpc.CallOption) (*TobeanadminResponse, error)
	CheckUserId(ctx context.Context, in *CheckUserIdRequest, opts ...grpc.CallOption) (*CheckUserIdResponse, error)
}

type registerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterServiceClient(cc grpc.ClientConnInterface) RegisterServiceClient {
	return &registerServiceClient{cc}
}

func (c *registerServiceClient) CreateRegister(ctx context.Context, in *CreateRegisterRequest, opts ...grpc.CallOption) (*CreateRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRegisterResponse)
	err := c.cc.Invoke(ctx, RegisterService_CreateRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, RegisterService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddImageResponse)
	err := c.cc.Invoke(ctx, RegisterService_AddImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) GetRegister(ctx context.Context, in *GetRegisterRequest, opts ...grpc.CallOption) (*GetRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegisterResponse)
	err := c.cc.Invoke(ctx, RegisterService_GetRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) GetRegisters(ctx context.Context, in *GetRegistersRequest, opts ...grpc.CallOption) (*GetRegistersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegistersResponse)
	err := c.cc.Invoke(ctx, RegisterService_GetRegisters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) DeleteRegister(ctx context.Context, in *DeleteRegisterRequest, opts ...grpc.CallOption) (*DeleteRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRegisterResponse)
	err := c.cc.Invoke(ctx, RegisterService_DeleteRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, RegisterService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, RegisterService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) GetByEmail(ctx context.Context, in *GetByEmailRequest, opts ...grpc.CallOption) (*GetByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByEmailResponse)
	err := c.cc.Invoke(ctx, RegisterService_GetByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, RegisterService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) Tobeanadmin(ctx context.Context, in *TobeanadminRequest, opts ...grpc.CallOption) (*TobeanadminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TobeanadminResponse)
	err := c.cc.Invoke(ctx, RegisterService_Tobeanadmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServiceClient) CheckUserId(ctx context.Context, in *CheckUserIdRequest, opts ...grpc.CallOption) (*CheckUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserIdResponse)
	err := c.cc.Invoke(ctx, RegisterService_CheckUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterServiceServer is the server API for RegisterService service.
// All implementations must embed UnimplementedRegisterServiceServer
// for forward compatibility.
type RegisterServiceServer interface {
	CreateRegister(context.Context, *CreateRegisterRequest) (*CreateRegisterResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error)
	GetRegister(context.Context, *GetRegisterRequest) (*GetRegisterResponse, error)
	GetRegisters(context.Context, *GetRegistersRequest) (*GetRegistersResponse, error)
	DeleteRegister(context.Context, *DeleteRegisterRequest) (*DeleteRegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	GetByEmail(context.Context, *GetByEmailRequest) (*GetByEmailResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	Tobeanadmin(context.Context, *TobeanadminRequest) (*TobeanadminResponse, error)
	CheckUserId(context.Context, *CheckUserIdRequest) (*CheckUserIdResponse, error)
	mustEmbedUnimplementedRegisterServiceServer()
}

// UnimplementedRegisterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegisterServiceServer struct{}

func (UnimplementedRegisterServiceServer) CreateRegister(context.Context, *CreateRegisterRequest) (*CreateRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegister not implemented")
}
func (UnimplementedRegisterServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRegisterServiceServer) AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedRegisterServiceServer) GetRegister(context.Context, *GetRegisterRequest) (*GetRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegister not implemented")
}
func (UnimplementedRegisterServiceServer) GetRegisters(context.Context, *GetRegistersRequest) (*GetRegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisters not implemented")
}
func (UnimplementedRegisterServiceServer) DeleteRegister(context.Context, *DeleteRegisterRequest) (*DeleteRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegister not implemented")
}
func (UnimplementedRegisterServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRegisterServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedRegisterServiceServer) GetByEmail(context.Context, *GetByEmailRequest) (*GetByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedRegisterServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRegisterServiceServer) Tobeanadmin(context.Context, *TobeanadminRequest) (*TobeanadminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tobeanadmin not implemented")
}
func (UnimplementedRegisterServiceServer) CheckUserId(context.Context, *CheckUserIdRequest) (*CheckUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserId not implemented")
}
func (UnimplementedRegisterServiceServer) mustEmbedUnimplementedRegisterServiceServer() {}
func (UnimplementedRegisterServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterServiceServer will
// result in compilation errors.
type UnsafeRegisterServiceServer interface {
	mustEmbedUnimplementedRegisterServiceServer()
}

func RegisterRegisterServiceServer(s grpc.ServiceRegistrar, srv RegisterServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegisterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegisterService_ServiceDesc, srv)
}

func _RegisterService_CreateRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).CreateRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_CreateRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).CreateRegister(ctx, req.(*CreateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_AddImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).AddImage(ctx, req.(*AddImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_GetRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).GetRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_GetRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).GetRegister(ctx, req.(*GetRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_GetRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).GetRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_GetRegisters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).GetRegisters(ctx, req.(*GetRegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_DeleteRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).DeleteRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_DeleteRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).DeleteRegister(ctx, req.(*DeleteRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_GetByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).GetByEmail(ctx, req.(*GetByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_Tobeanadmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TobeanadminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).Tobeanadmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_Tobeanadmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).Tobeanadmin(ctx, req.(*TobeanadminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterService_CheckUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServiceServer).CheckUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterService_CheckUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServiceServer).CheckUserId(ctx, req.(*CheckUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterService_ServiceDesc is the grpc.ServiceDesc for RegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "register.RegisterService",
	HandlerType: (*RegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegister",
			Handler:    _RegisterService_CreateRegister_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegisterService_Update_Handler,
		},
		{
			MethodName: "AddImage",
			Handler:    _RegisterService_AddImage_Handler,
		},
		{
			MethodName: "GetRegister",
			Handler:    _RegisterService_GetRegister_Handler,
		},
		{
			MethodName: "GetRegisters",
			Handler:    _RegisterService_GetRegisters_Handler,
		},
		{
			MethodName: "DeleteRegister",
			Handler:    _RegisterService_DeleteRegister_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RegisterService_Login_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _RegisterService_UpdatePassword_Handler,
		},
		{
			MethodName: "GetByEmail",
			Handler:    _RegisterService_GetByEmail_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RegisterService_UpdateRole_Handler,
		},
		{
			MethodName: "Tobeanadmin",
			Handler:    _RegisterService_Tobeanadmin_Handler,
		},
		{
			MethodName: "CheckUserId",
			Handler:    _RegisterService_CheckUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stadion_protos/register/register.proto",
}
